{
  "@context": {
    "shacl": "http://www.w3.org/ns/shacl#",
    "fnml": "http://semweb.mmlab.be/ns/fnml#",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "label": "rdfs:label",
    "rdfs:subClassOf": { "@type": "@id" },
    "rdfs:range": { "@type": "@id" },
    "rdfs:domain": { "@type": "@id" },
    "boolean": "http://www.w3.org/2001/XMLSchema#boolean",
    "integer": "http://www.w3.org/2001/XMLSchema#integer",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "rr": "http://www.w3.org/ns/r2rml#",
    "rml": "http://semweb.mmlab.be/ns/rml#",
    "owl": "http://www.w3.org/2002/07/owl#",
    "skos": "http://www.w3.org/2004/02/skos/core#",
    "dcterms": "http://purl.org/dc/elements/1.1/",
    "description": "dcterms:description",
    "shacl:class": { "@type": "@id" },
    "shacl:datatype": { "@type": "@id" },
    "shacl:maxCount": { "@type": "xsd:integer" },
    "shacl:minCount": { "@type": "xsd:integer" },
    "shacl:targetClass": { "@type": "@id" },
    "shacl:path": { "@type": "@id" },
    "skl": "https://standardknowledge.com/ontologies/core/",
    "skl:integration": { "@type": "@id" },
    "skl:account": { "@type": "@id" },
    "skl:openApiDescription": { "@type": "@json" },
    "skl:parametersContext": { "@type": "@json" },
    "skl:returnValueFrame": { "@type": "@json" },
    "skl:noun": { "@type": "@id" },
    "skl:verb": { "@type": "@id" },
    "skl:parameterMapping": { "@type": "@id" },
    "skl:parameterMappingFrame": { "@type": "@json" },
    "skl:returnValueMapping": { "@type": "@id" },
    "skl:operationMapping": { "@type": "@id" },
    "skl:verbMapping": { "@type": "@id" },
    "integration": { "@id": "skl:integration", "@type": "@id" },
    "verb": { "@id": "skl:verb", "@type": "@id" },
    "rml:referenceFormulation": { "@type": "@id" },
    "rr:parentTriplesMap": { "@type": "@id" },
    "rr:predicate": { "@type": "@id" },
    "rr:object": { "@type": "@id" },
    "rr:termType": { "@type": "@id" },
    "rr:datatype": { "@type": "@id" },
    "rr:subject": { "@type": "@id" },
    "rr:class": { "@type": "@id" },
    "skl:invalidTokenErrorMatcher": { "@type": "@json" },
    "example": "https://example.com/"
  },
  "@graph": [
    {
      "@id": "https://example.com/parseLinksAndCountCharactersFromEntity",
      "@type": "https://standardknowledge.com/ontologies/core/Verb",
      "label": "parseLinksAndCountCharactersFromEntity",
      "skl:parametersContext": {
        "entity": {
          "@id": "https://example.com/entity",
          "@type": "@id"
        }
      },
      "skl:parameters": {
        "@type": "shacl:NodeShape",
        "shacl:targetClass": "skl:Parameters",
        "shacl:property": [
          {
            "shacl:maxCount": 1,
            "shacl:minCount": 1,
            "shacl:path": "https://example.com/entity",
            "shacl:name": "entity",
            "shacl:nodeKind": { "@id": "shacl:IRI" }
          }
        ]
      },
      "skl:parallel": [
        {
          "skl:parameterMapping": {
            "@type": "rr:TriplesMap",
            "rml:logicalSource": {
              "@type": "rml:LogicalSource",
              "rml:iterator": "$",
              "rml:referenceFormulation": "http://semweb.mmlab.be/ns/ql#JSONPath",
              "rml:source": "input.json"
            },
            "rr:subject": "https://example.com/mappingSubject",
            "rr:predicateObjectMap": [
              {
                "@type": "rr:PredicateObjectMap",
                "rr:objectMap": {
                  "@type": "rr:ObjectMap",
                  "rr:datatype": "http://www.w3.org/2001/XMLSchema#string",
                  "rml:reference": "entity[`@type]"
                },
                "rr:predicate": "example:noun"
              },
              {
                "@type": "rr:PredicateObjectMap",
                "rr:objectMap": {
                  "@type": "rr:ObjectMap",
                  "rml:reference": "entity"
                },
                "rr:predicate": "example:entity"
              }
            ]
          },
          "skl:parameterMappingFrame": {
            "@context": {
              "noun": {
                "@id": "https://example.com/noun",
                "@type": "http://www.w3.org/2001/XMLSchema#string"
              },
              "entity": {
                "@id": "https://example.com/entity",
                "@type": "@id"
              }
            },
            "@id": "https://example.com/mappingSubject"
          },
          "skl:verbMapping": {
            "@type": "rr:TriplesMap",
            "rml:logicalSource": {
              "@type": "rml:LogicalSource",
              "rml:iterator": "$",
              "rml:referenceFormulation": "http://semweb.mmlab.be/ns/ql#JSONPath",
              "rml:source": "input.json"
            },
            "rr:predicateObjectMap": [
              {
                "@type": "rr:PredicateObjectMap",
                "rr:object": "https://example.com/getTextBody",
                "rr:predicate": "skl:verb"
              }
            ],
            "rr:subjectMap": {
              "@type": "rr:SubjectMap",
              "rr:termType": "rr:BlankNode"
            }
          },
          "skl:returnValueMapping": {
            "@type": "rr:TriplesMap",
            "rml:logicalSource": {
              "@type": "rml:LogicalSource",
              "rml:iterator": "$",
              "rml:referenceFormulation": "http://semweb.mmlab.be/ns/ql#JSONPath",
              "rml:source": "input.json"
            },
            "rr:predicateObjectMap": [
              {
                "@type": "rr:PredicateObjectMap",
                "rr:predicate": "example:links",
                "rr:objectMap": {
                  "@type": "rr:ObjectMap",
                  "rr:datatype": "xsd:string",
                  "fnml:functionValue": {
                    "@type": "fnml:FunctionValue",
                    "rr:predicateObjectMap": [
                      {
                        "@type": "rr:PredicateObjectMap",
                        "rr:object": "https://example.com/functions/parseLinksFromText",
                        "rr:predicate": "https://w3id.org/function/ontology#executes"
                      },
                      {
                        "@type": "rr:PredicateObjectMap",
                        "rr:predicate": "https://example.com/functions/text",
                        "rr:objectMap": {
                          "@type": "rr:ObjectMap",
                          "rml:reference": "text"
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "rr:subjectMap": {
              "@type": "rr:SubjectMap",
              "rr:class": "https://example.com/LinksObject",
              "rr:termType": "rr:BlankNode"
            }
          },
          "skl:returnValueFrame": {
            "@context": {
              "links": {
                "@id": "https://example.com/links",
                "@type": "http://www.w3.org/2001/XMLSchema#string",
                "@container": "@set"
              }
            }
          }
        },
        {
          "skl:parameterMapping": {
            "@type": "rr:TriplesMap",
            "rml:logicalSource": {
              "@type": "rml:LogicalSource",
              "rml:iterator": "$",
              "rml:referenceFormulation": "http://semweb.mmlab.be/ns/ql#JSONPath",
              "rml:source": "input.json"
            },
            "rr:subject": "https://example.com/mappingSubject",
            "rr:predicateObjectMap": [
              {
                "@type": "rr:PredicateObjectMap",
                "rr:objectMap": {
                  "@type": "rr:ObjectMap",
                  "rr:datatype": "http://www.w3.org/2001/XMLSchema#string",
                  "rml:reference": "entity[`@type]"
                },
                "rr:predicate": "example:noun"
              },
              {
                "@type": "rr:PredicateObjectMap",
                "rr:objectMap": {
                  "@type": "rr:ObjectMap",
                  "rml:reference": "entity"
                },
                "rr:predicate": "example:entity"
              }
            ]
          },
          "skl:parameterMappingFrame": {
            "@context": {
              "noun": {
                "@id": "https://example.com/noun",
                "@type": "http://www.w3.org/2001/XMLSchema#string"
              },
              "entity": {
                "@id": "https://example.com/entity",
                "@type": "@id"
              }
            },
            "@id": "https://example.com/mappingSubject"
          },
          "skl:verbMapping": {
            "@type": "rr:TriplesMap",
            "rml:logicalSource": {
              "@type": "rml:LogicalSource",
              "rml:iterator": "$",
              "rml:referenceFormulation": "http://semweb.mmlab.be/ns/ql#JSONPath",
              "rml:source": "input.json"
            },
            "rr:predicateObjectMap": [
              {
                "@type": "rr:PredicateObjectMap",
                "rr:object": "https://example.com/getTextBody",
                "rr:predicate": "skl:verb"
              }
            ],
            "rr:subjectMap": {
              "@type": "rr:SubjectMap",
              "rr:termType": "rr:BlankNode"
            }
          },
          "skl:returnValueMapping": {
            "@type": "rr:TriplesMap",
            "rml:logicalSource": {
              "@type": "rml:LogicalSource",
              "rml:iterator": "$",
              "rml:referenceFormulation": "http://semweb.mmlab.be/ns/ql#JSONPath",
              "rml:source": "input.json"
            },
            "rr:predicateObjectMap": [
              {
                "@type": "rr:PredicateObjectMap",
                "rr:predicate": "example:length",
                "rr:objectMap": {
                  "@type": "rr:ObjectMap",
                  "rr:datatype": "xsd:integer",
                  "fnml:functionValue": {
                    "@type": "fnml:FunctionValue",
                    "rr:predicateObjectMap": [
                      {
                        "@type": "rr:PredicateObjectMap",
                        "rr:object": "http://users.ugent.be/~bjdmeest/function/grel.ttl#string_length",
                        "rr:predicate": "https://w3id.org/function/ontology#executes"
                      },
                      {
                        "@type": "rr:PredicateObjectMap",
                        "rr:predicate": "http://users.ugent.be/~bjdmeest/function/grel.ttl#valueParameter",
                        "rr:objectMap": {
                          "@type": "rr:ObjectMap",
                          "rml:reference": "text"
                        }
                      }
                    ]
                  }
                }
              }
            ],
            "rr:subjectMap": {
              "@type": "rr:SubjectMap",
              "rr:class": "https://example.com/MeasurementObject",
              "rr:termType": "rr:BlankNode"
            }
          },
          "skl:returnValueFrame": {
            "@context": {
              "length": {
                "@id": "https://example.com/length",
                "@type": "http://www.w3.org/2001/XMLSchema#integer"
              }
            }
          }
        }
      ],
      "skl:returnValue": {
        "@type": "shacl:NodeShape",
        "shacl:closed": false,
        "shacl:property": [
          {
            "shacl:name": "links",
            "shacl:datatype": "xsd:string",
            "shacl:path": "example:links"
          },
          {
            "shacl:name": "length",
            "shacl:datatype": "xsd:integer",
            "shacl:path": "example:length"
          }
        ]
      }
    },
    {
      "@id": "https://example.com/getTextBody",
      "@type": "https://standardknowledge.com/ontologies/core/Verb",
      "label": "getTextBody",
      "skl:parametersContext": {
        "entity": {
          "@id": "https://example.com/entity",
          "@type": "@id"
        },
        "noun": {
          "@id": "https://example.com/noun",
          "@type": "http://www.w3.org/2001/XMLSchema#string"
        }
      },
      "skl:parameters": {
        "@type": "shacl:NodeShape",
        "shacl:targetClass": "skl:Parameters",
        "shacl:property": [
          {
            "shacl:maxCount": 1,
            "shacl:minCount": 1,
            "shacl:path": "https://example.com/entity",
            "shacl:name": "entity",
            "shacl:nodeKind": { "@id": "shacl:IRI" }
          },
          {
            "shacl:maxCount": 1,
            "shacl:minCount": 1,
            "shacl:path": "https://example.com/noun",
            "shacl:name": "noun"
          }
        ]
      },
      "skl:returnValue": {
        "@type": "shacl:NodeShape",
        "shacl:closed": false,
        "shacl:property": [
          {
            "shacl:maxCount": 1,
            "shacl:minCount": 1,
            "shacl:name": "text",
            "shacl:path": "https://example.com/text"
          }
        ]
      },
      "skl:returnValueFrame": {
        "@context": {
          "text": {
            "@id": "https://example.com/text",
            "@type": "http://www.w3.org/2001/XMLSchema#string"
          }
        }
      }
    },
    {
      "@id": "https://example.com/data/34",
      "@type": "https://standardknowledge.com/ontologies/core/VerbNounMapping",
      "skl:verb": "https://example.com/getTextBody",
      "skl:noun": "https://schema.org/BlogPosting",
      "label": "getTextBodyToBlogPosting",
      "skl:returnValueMapping": {
        "@type": "rr:TriplesMap",
        "rml:logicalSource": {
          "@type": "rml:LogicalSource",
          "rml:iterator": "$",
          "rml:referenceFormulation": "http://semweb.mmlab.be/ns/ql#JSONPath",
          "rml:source": "input.json"
        },
        "rr:predicateObjectMap": [
          {
            "@type": "rr:PredicateObjectMap",
            "rr:predicate": "example:text",
            "rr:objectMap": {
              "@type": "rr:ObjectMap",
              "rr:datatype": "xsd:string",
              "rml:reference": "entity['https://schema.org/articleBody'][`@value]"
            }
          }
        ],
        "rr:subjectMap": {
          "@type": "rr:SubjectMap",
          "rr:termType": "rr:BlankNode"
        }
      },
      "skl:returnValueFrame": {
        "@context": {
          "text": {
            "@id": "https://example.com/text",
            "@type": "http://www.w3.org/2001/XMLSchema#string"
          }
        }
      }
    }
  ]
}